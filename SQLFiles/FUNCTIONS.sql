USE QLKS;

IF EXISTS(SELECT 1 FROM sys.objects WHERE type = 'FN')
	DROP FUNCTION FN_DID_THIS_USER_EXIST
GO

IF EXISTS(SELECT 1 FROM sys.objects WHERE type = 'FN')
	DROP FUNCTION FN_IS_ADMIN
GO

IF EXISTS(SELECT 1 FROM sys.objects WHERE type = 'FN')
	DROP FUNCTION FN_USER_HAS_ROLE
GO

IF EXISTS(SELECT 1 FROM sys.objects WHERE type = 'FN')
	DROP FUNCTION FN_GENERATE_ROOM_NUMBER
GO

IF EXISTS(SELECT 1 FROM sys.objects WHERE type = 'FN')
	DROP FUNCTION FN_DATABASE_CONTAINS_USER
GO

-- check if the user existed
CREATE FUNCTION FN_DID_THIS_USER_EXIST
(@USER_NAME NVARCHAR(255))
RETURNS BIT
AS
BEGIN
IF EXISTS(SELECT 1
		  FROM USERS
		  WHERE USER_NAME = @USER_NAME)
	RETURN 1
RETURN 0
END
GO

-- Check if this user is admin
CREATE FUNCTION FN_IS_ADMIN
(@USER_NAME NVARCHAR(255))
RETURNS BIT
AS
BEGIN
IF EXISTS(SELECT 1
		  FROM USERS
		  WHERE IS_ADMIN = 1 AND USER_NAME = @USER_NAME)
	RETURN 1
RETURN 0
END
GO

-- Check if the user has this role
CREATE FUNCTION FN_USER_HAS_ROLE
(
@USER_NAME NVARCHAR(255),
@ROLE_NAME NVARCHAR(255)
)
RETURNS BIT
AS
BEGIN
IF EXISTS(SELECT 1 
		  FROM (USERS A INNER JOIN USER2ROLE B ON A.USERID = B.USERID) 
		   			    INNER JOIN ROLES C ON B.ROLEID = C.ROLEID
		  WHERE ROLE_NAME = @ROLE_NAME AND A.USER_NAME = @USER_NAME)
	RETURN 1
RETURN 0
END
GO

-- Check if the database contains this user
CREATE FUNCTION FN_DATABASE_CONTAINS_USER
(
@USER_NAME NVARCHAR(255),
@USER_PASSWORD NVARCHAR(255)
)
RETURNS BIT
AS
BEGIN
IF EXISTS(SELECT 1 FROM USERS WHERE USER_NAME = @USER_NAME AND USER_PASSWORD = @USER_PASSWORD AND DELETED = 0)
	RETURN 1
RETURN 0
END
GO


-- This function is used for auto-creating room number (go with TRIGGER_GENERATE_ROOT_NUMBER)
CREATE FUNCTION FN_GENERATE_ROOM_NUMBER(@ID INT)
RETURNS NVARCHAR(6) 
AS 
BEGIN 
RETURN 'PH' + RIGHT('00000' + CONVERT(VARCHAR(6), @ID), 4)
END
GO